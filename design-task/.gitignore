# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*



import React, { useState } from 'react';


const TaskList = () => {
    const [modal, setModal] = useState(false);
  
    const toggle = () => setModal(!modal);
  
    return (
      <>
        <div className='header text-center'>
          <h3>Task Manager</h3>
          <button className='btn btn-primary mt-2' onClick={toggle}>
            Craft Task
          </button>
        </div>
        <div className='task-container'></div>
        {modal && (
          <div className='modal'>
            <div className='modal-content'>
              <div className='modal-header'>
                <h5 className='modal-title'>Craft Task</h5>
                <button className='btn-close' onClick={toggle}></button>
              </div>
              <div className='modal-body'>
                <form>
                  <div className='form-group'>
                    <label>Title:</label>
                    <input type='text' className='form-control' />
                  </div>
                  <div className='form-group'>
                    <label>Category:</label>
                    <input type='text' className='form-control' />
                  </div>
                  <div className='form-group'>
                    <label>Due Date:</label>
                    <input type='date' className='form-control' />
                  </div>
                  <div className='form-group'>
                    <label>Priority:</label>
                    <select className='form-control'>
                      <option>Low</option>
                      <option>Medium</option>
                      <option>High</option>
                    </select>
                  </div>
                  <div className='form-group'>
                    <label>Description:</label>
                    <textarea className='form-control' rows='3'></textarea>
                  </div>
                </form>
              </div>
              <div className='modal-footer'>
                <button className='btn btn-primary' onClick={toggle}>
                  Create
                </button>
                <button className='btn btn-secondary' onClick={toggle}>
                  Cancel
                </button>
              </div>
            </div>
          </div>
        )}
      </>
    );
  };
  
  export default TaskList;










  import React, { useState } from 'react';

function TaskForm(props) {
  const [input, setInput] = useState('');
 const handleChange = e => {
  setInput(e.target.value)
 };


  const handleSubmit = e => {
    e.preventDefault();

    props.onSubmit({
      id: Math.floor(Math.random() * 10000),
      text: input
    });

    setInput('');
  };

  return (
    <form className='task-form' onSubmit={handleSubmit}>
      <input
        type='text'
        placeholder='craft task'
        value={input}
        name='text'
        className='task-input'

        onChange={e => setInput(e.target.value)}
      />
      <button className='task-button'>Add task</button>
    </form>
  );
}

export default TaskForm;







import React, { useState } from 'react';
import TaskForm from './TaskForm';
import Task from './Task';

function TaskList() {
  const [tasks, setTasks] = useState([]);

  const addTask = task => {
    if (!task.text || /^\s*$/.test(task.text)) {
      return;
    }
    
const newTasks = [task,...tasks]

setTasks(newTasks)


  };

  const completeTask = id => {
    let updatedTasks = tasks.map(task => {
       if (task.id === id) {
        task.isComplete = !task.isComplete
       }
       return task
    })
    setTasks{updatedTasks};
  }

  return (
    <div>
      <h1>What's The Game Plan Currently?</h1>
      <TaskForm onSubmit={addTask} />
      <Task
      tasks={tasks}
      completeTask={completeTask}
      />
    </div>
  );
}

export default TaskList;







import React , {useState} from 'react'
import TaskForm from './TaskForm';
import { RiCloseCircleLine } from 'react-icons/ri';
import { TiEdit } from 'react-icons/ti';


function Task({tasks, completeTask}) {
const[edit, setEdit] =useState({
    id:null,
    value:''
})

  return tasks.map((task,index) =>(
    <div className={task.isComplete? 'task-row complete':
'task-row'}key={index}
>
    <div key={task.id} onClick={() => completeTask(task.id)}>
{task.text}

    </div>
<div className='icons'>
<RiCloseCircleLine
/>
<TiEdit/>
</div>
    </div>
  ))
}

export default Task;





import React from 'react';
import { RiCloseCircleLine } from 'react-icons/ri';
import { TiEdit } from 'react-icons/ti';

function Task({ tasks, completeTask }) {
  return tasks.map((task, index) => (
    <div className={task.isComplete ? 'task-row complete' : 'task-row'} key={index}>
      <div onClick={() => completeTask(task.id)}>{task.text}</div>
      <div className='icons'>
        <RiCloseCircleLine onClick={() => completeTask(task.id)} 
        className='delete-icon'
        />
        <TiEdit />
      </div>
    </div>
  ));
}

export default Task;



const handleSubmit = async (event) => {
  event.preventDefault();
  try {
    // Make an API call to add the new task to the database
    const response = await fetch('http://localhost:9292/task', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        text: input,
        title,
        category,
        dueDate,
        startTime,
        endTime,
        priority,
        description
      }),
    });
    if (response.ok) {
      const data = await response.json();
      // Call the onSubmit function and pass the response data
      props.onSubmit(data);
      // Reset the form fields
      setInput('');
      setTitle('');
      setCategory('');
      setDueDate('');
      setStartTime('');
      setEndTime('');
      setPriority('');
      setDescription('');
    } else {
      throw new Error('Error adding task');
    }
  } catch (error) {
    console.error('Error adding task:', error);
  }
};



 const handleSubmit = e => {
    e.preventDefault();


    

    props.onSubmit({
      id: Math.floor(Math.random() * 10000),
      text: input,
      title: title,
      category: category,
      dueDate: dueDate,
      startTime: startTime,
      endTime: endTime,
      priority: priority,
      description: description
    });

    setInput('');
    setTitle('');
    setCategory('');
    setDueDate('');
    setStartTime('');
    setEndTime('');
    setPriority('');
    setDescription('');
  };